from htutil import file
import subprocess
from src.util.path import *
from .BaseSpider import BaseSpider

class ExploitdbSpider(BaseSpider):

    def get_id_list(self):
        lines = file.read_lines(dir_spider_exploitdb_git_repo / 'files_exploits.csv')
        id_list = [line.split(',')[0] for line in lines]
        return id_list

    def get_update_id_set(self):

        if not dir_spider_exploitdb_git_repo.exists():
            cmd = f'git clone --depth=1 https://github.com/offensive-security/exploitdb {dir_spider_exploitdb_git_repo.absolute()}'
            print(f'running\n{cmd}')
            subprocess.run(cmd, shell=True, cwd=dir_project.parent)

        old_id_list = self.get_id_list()

        subprocess.run('git pull', shell=True,
                       cwd=dir_spider_exploitdb_git_repo)

        new_id_list = self.get_id_list()

        update_id_set = set(new_id_list) - set(old_id_list)
        return update_id_set

    def get_update_reports(self) -> list:
        update_id_set = self.get_update_id_set()

        dict_id_path = {}
        dict_id_title = []

        lines = file.read_lines(
            dir_spider_exploitdb_git_repo / 'files_exploits.csv')

        for line in lines:
            items = line.split(',')

            dict_id_path[items[0]] = items[1]
            # 顺便把title读了
            dict_id_title[items[0]] = items[2]


        report_list = []

        for id in update_id_set:
            file_path = dict_id_path[id]
            file_full_path = dir_spider_exploitdb_git_repo / file_path

            report = file.read_text(file_full_path)
            title = dict_id_title[id]
            report_list.append( title + report)

        return report_list


exploitdbSpider = ExploitdbSpider()